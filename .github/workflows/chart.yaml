name: Helm chart

on:
  push:
    branches:
      - 'main'
    paths:
      - 'charts/**'
  pull_request:
    branches:
      - 'main'
    paths:
      - 'charts/**'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  CHART_LOCATION: ${{ github.repository_owner }}/charts

permissions:
  contents: read # for actions/checkout to fetch code

jobs:
  helm-new-version:
    runs-on: ubuntu-latest
    outputs:
      old-version: ${{ steps.old-version.outputs.version }}
      new-version: ${{ steps.new-version.outputs.version }}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0
      - name: Find new version
        id: new-version
        run: |
          NEW_VERSION=$(yq e '.version' charts/gitops-server/Chart.yaml)
          echo "version=$new_version" >> $GITHUB_OUTPUT
      - name: Find old version
        id: old-version
        run: |
          git checkout ${{ github.event.pull_request.base.sha || github.event.before }}
          OLD_VERSION=$(yq e '.version' charts/gitops-server/Chart.yaml)
          echo "version=$OLD_VERSION" >> $GITHUB_OUTPUT

  helm-will-release:
    runs-on: ubuntu-latest
    needs: helm-new-version
    permissions:
      pull-requests: write
    if: github.event_name == 'pull_request' && needs.helm-new-version.outputs.old-version != needs.helm-new-version.outputs.new-version
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0
      - name: Find out if there's more changes to release
        id: extra
        run: |
          last_revision=$(git blame ${{ github.event.pull_request.base.sha }} -L '/^version: [0-9.]\+$/,+1' charts/gitops-server/Chart.yaml | awk '{print $1}')

          set +e
          git log --exit-code $last_revision...${{ github.event.pull_request.base.sha }} charts/gitops-server
          unreleased_commits=$?
          if [[ $unreleased_commits == 1 ]]; then
              echo "unreleased-commits=The last chart was last released in $last_revision and there have been other changes in the chart since" >> $GITHUB_OUTPUT
          fi
      - name: Let user know merging will cause a release
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "Merging this will release a new helm chart. ${{ steps.extra.outputs.unreleased-commits }}"
            })

  helm-release:
    runs-on: ubuntu-latest
    needs: helm-new-version
    if: (github.event_name == 'push' && needs.helm-new-version.outputs.old-version != needs.helm-new-version.outputs.new-version) || github.event_name == 'workflow_dispatch'
    permissions:
      packages: write # needed for ghcr access
      actions: read # for detecting the Github Actions environment.
      id-token: write # for creating OIDC tokens for signing.
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - name: Find new version
        id: new_version
        run: |
          NEW_VERSION=$(yq e '.version' charts/gitops-server/Chart.yaml)
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
      - name: Install Cosign
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 # v3.5.0
      - name: Generate new chart
        run: |
          mkdir helm-release
          helm package charts/gitops-server/ -d helm-release
      - name: Log in to the Container registry
        uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446 # v3.2.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish chart as an OCI image and cosign it
        run: |
          helm push helm-release/weave-gitops-${{ steps.new_version.outputs.version }}.tgz oci://${{ env.REGISTRY }}/${{ env.CHART_LOCATION }} &> push-metadata.txt
          CHART_DIGEST=$(awk '/Digest: /{print $2}' push-metadata.txt)
          echo "CHART_DIGEST=${CHART_DIGEST}" | tee -a $GITHUB_ENV
          cosign sign -y "oci://${{ env.REGISTRY }}/${{ env.CHART_LOCATION }}/weave-gitops@${CHART_DIGEST}"
          cosign verify "oci://${{ env.REGISTRY }}/${{ env.CHART_LOCATION }}/weave-gitops@${CHART_DIGEST}" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            --certificate-identity "https://github.com/${GITHUB_WORKFLOW_REF}"
